// Generated by rstantools.  Do not edit by hand.

/*
    rPQ is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rPQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rPQ.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_PQ_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 32> locations_array__ =
  {" (found before start of program)",
  " (in 'PQ', line 19, column 2 to column 26)",
  " (in 'PQ', line 20, column 2 to column 26)",
  " (in 'PQ', line 21, column 2 to column 35)",
  " (in 'PQ', line 31, column 2 to column 29)",
  " (in 'PQ', line 32, column 2 to column 100)",
  " (in 'PQ', line 25, column 4 to column 42)",
  " (in 'PQ', line 26, column 4 to column 42)",
  " (in 'PQ', line 27, column 4 to column 78)",
  " (in 'PQ', line 24, column 18 to line 28, column 3)",
  " (in 'PQ', line 24, column 2 to line 28, column 3)",
  " (in 'PQ', line 2, column 2 to column 24)",
  " (in 'PQ', line 3, column 25 to column 33)",
  " (in 'PQ', line 3, column 2 to column 35)",
  " (in 'PQ', line 4, column 25 to column 33)",
  " (in 'PQ', line 4, column 2 to column 35)",
  " (in 'PQ', line 5, column 20 to column 28)",
  " (in 'PQ', line 5, column 2 to column 30)",
  " (in 'PQ', line 6, column 2 to column 33)",
  " (in 'PQ', line 9, column 22 to column 30)",
  " (in 'PQ', line 9, column 2 to column 45)",
  " (in 'PQ', line 10, column 22 to column 30)",
  " (in 'PQ', line 10, column 2 to column 45)",
  " (in 'PQ', line 11, column 22 to column 30)",
  " (in 'PQ', line 11, column 2 to column 40)",
  " (in 'PQ', line 12, column 2 to column 14)",
  " (in 'PQ', line 13, column 2 to column 44)",
  " (in 'PQ', line 14, column 2 to column 44)",
  " (in 'PQ', line 15, column 2 to column 39)",
  " (in 'PQ', line 16, column 2 to column 29)",
  " (in 'PQ', line 19, column 10 to column 18)",
  " (in 'PQ', line 20, column 10 to column 18)"};
#include <stan_meta_header.hpp>
class model_PQ final : public model_base_crtp<model_PQ> {
private:
  int n_bucket;
  std::vector<int> train_pos;
  std::vector<int> train_neg;
  std::vector<int> test;
  int posterior;
  Eigen::Matrix<double,1,-1> train_pos_rv_data__;
  Eigen::Matrix<double,1,-1> train_neg_rv_data__;
  Eigen::Matrix<double,1,-1> test_rv_data__;
  double n_test;
  Eigen::Map<Eigen::Matrix<double,1,-1>> train_pos_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> train_neg_rv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> test_rv{nullptr, 0};
public:
  ~model_PQ() {}
  model_PQ(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ = "model_PQ_namespace::model_PQ";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 11;
      context__.validate_dims("data initialization", "n_bucket", "int",
        std::vector<size_t>{});
      n_bucket = std::numeric_limits<int>::min();
      current_statement__ = 11;
      n_bucket = context__.vals_i("n_bucket")[(1 - 1)];
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "n_bucket", n_bucket, 0);
      current_statement__ = 12;
      stan::math::validate_non_negative_index("train_pos", "n_bucket",
        n_bucket);
      current_statement__ = 13;
      context__.validate_dims("data initialization", "train_pos", "int",
        std::vector<size_t>{static_cast<size_t>(n_bucket)});
      train_pos = std::vector<int>(n_bucket, std::numeric_limits<int>::min());
      current_statement__ = 13;
      train_pos = context__.vals_i("train_pos");
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "train_pos", train_pos,
        0);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("train_neg", "n_bucket",
        n_bucket);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "train_neg", "int",
        std::vector<size_t>{static_cast<size_t>(n_bucket)});
      train_neg = std::vector<int>(n_bucket, std::numeric_limits<int>::min());
      current_statement__ = 15;
      train_neg = context__.vals_i("train_neg");
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "train_neg", train_neg,
        0);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("test", "n_bucket", n_bucket);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "test", "int",
        std::vector<size_t>{static_cast<size_t>(n_bucket)});
      test = std::vector<int>(n_bucket, std::numeric_limits<int>::min());
      current_statement__ = 17;
      test = context__.vals_i("test");
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "test", test, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "posterior", "int",
        std::vector<size_t>{});
      posterior = std::numeric_limits<int>::min();
      current_statement__ = 18;
      posterior = context__.vals_i("posterior")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "posterior", posterior,
        0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "posterior", posterior, 1);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("train_pos_rv", "n_bucket",
        n_bucket);
      current_statement__ = 20;
      train_pos_rv_data__ = Eigen::Matrix<double,1,-1>::Constant(n_bucket,
                              std::numeric_limits<double>::quiet_NaN());
      new (&train_pos_rv)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(train_pos_rv_data__.data(),
        n_bucket);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("train_neg_rv", "n_bucket",
        n_bucket);
      current_statement__ = 22;
      train_neg_rv_data__ = Eigen::Matrix<double,1,-1>::Constant(n_bucket,
                              std::numeric_limits<double>::quiet_NaN());
      new (&train_neg_rv)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(train_neg_rv_data__.data(),
        n_bucket);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("test_rv", "n_bucket", n_bucket);
      current_statement__ = 24;
      test_rv_data__ = Eigen::Matrix<double,1,-1>::Constant(n_bucket,
                         std::numeric_limits<double>::quiet_NaN());
      new (&test_rv)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(test_rv_data__.data(),
        n_bucket);
      current_statement__ = 25;
      n_test = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 26;
      stan::model::assign(train_pos_rv, stan::math::to_row_vector(train_pos),
        "assigning variable train_pos_rv");
      current_statement__ = 27;
      stan::model::assign(train_neg_rv, stan::math::to_row_vector(train_neg),
        "assigning variable train_neg_rv");
      current_statement__ = 28;
      stan::model::assign(test_rv, stan::math::to_row_vector(test),
        "assigning variable test_rv");
      current_statement__ = 29;
      n_test = stan::math::sum(test);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "train_pos_rv",
        train_pos_rv, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "train_neg_rv",
        train_neg_rv, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "test_rv", test_rv, 0);
      current_statement__ = 30;
      stan::math::validate_positive_index("p_neg", "n_bucket", n_bucket);
      current_statement__ = 31;
      stan::math::validate_positive_index("p_pos", "n_bucket", n_bucket);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (n_bucket - 1) + (n_bucket - 1) + 1;
  }
  inline std::string model_name() const final {
    return "model_PQ";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_PQ_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> p_neg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_bucket, DUMMY_VAR__);
      current_statement__ = 1;
      p_neg = in__.template read_constrain_simplex<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                n_bucket);
      Eigen::Matrix<local_scalar_t__,-1,1> p_pos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_bucket, DUMMY_VAR__);
      current_statement__ = 2;
      p_pos = in__.template read_constrain_simplex<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                n_bucket);
      local_scalar_t__ prev_prior = DUMMY_VAR__;
      current_statement__ = 3;
      prev_prior = in__.template read_constrain_lub<local_scalar_t__,
                     jacobian__>(0, 1, lp__);
      {
        current_statement__ = 10;
        if (posterior) {
          current_statement__ = 6;
          lp_accum__.add(stan::math::multiply(train_neg_rv,
                           stan::math::log(p_neg)));
          current_statement__ = 7;
          lp_accum__.add(stan::math::multiply(train_pos_rv,
                           stan::math::log(p_pos)));
          current_statement__ = 8;
          lp_accum__.add(stan::math::multiply(test_rv,
                           stan::math::log(
                             stan::math::add(
                               stan::math::multiply(p_neg, (1 - prev_prior)),
                               stan::math::multiply(p_pos, prev_prior)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_PQ_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> p_neg =
        Eigen::Matrix<double,-1,1>::Constant(n_bucket,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      p_neg = in__.template read_constrain_simplex<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                n_bucket);
      Eigen::Matrix<double,-1,1> p_pos =
        Eigen::Matrix<double,-1,1>::Constant(n_bucket,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      p_pos = in__.template read_constrain_simplex<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__,
                n_bucket);
      double prev_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      prev_prior = in__.template read_constrain_lub<local_scalar_t__,
                     jacobian__>(0, 1, lp__);
      out__.write(p_neg);
      out__.write(p_pos);
      out__.write(prev_prior);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double prev = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      prev = (stan::math::sum(
                stan::math::binomial_rng(test,
                  stan::math::divide(1,
                    stan::math::add(1,
                      stan::math::divide(
                        stan::math::multiply(
                          stan::math::elt_divide(p_neg, p_pos), (1 -
                          prev_prior)), prev_prior))), base_rng__))
        / n_test);
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "prev", prev, 0);
      current_statement__ = 4;
      stan::math::check_less_or_equal(function__, "prev", prev, 1);
      out__.write(prev);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> p_neg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_bucket, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(p_neg,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_bucket),
        "assigning variable p_neg");
      out__.write_free_simplex(p_neg);
      Eigen::Matrix<local_scalar_t__,-1,1> p_pos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_bucket, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(p_pos,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_bucket),
        "assigning variable p_pos");
      out__.write_free_simplex(p_pos);
      local_scalar_t__ prev_prior = DUMMY_VAR__;
      current_statement__ = 3;
      prev_prior = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prev_prior);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "p_neg", "double",
        std::vector<size_t>{static_cast<size_t>(n_bucket)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "p_pos", "double",
        std::vector<size_t>{static_cast<size_t>(n_bucket)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "prev_prior",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> p_neg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_bucket, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_neg_flat__;
        current_statement__ = 1;
        p_neg_flat__ = context__.vals_r("p_neg");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_bucket; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(p_neg, p_neg_flat__[(pos__ - 1)],
            "assigning variable p_neg", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(p_neg);
      Eigen::Matrix<local_scalar_t__,-1,1> p_pos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_bucket, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_pos_flat__;
        current_statement__ = 2;
        p_pos_flat__ = context__.vals_r("p_pos");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_bucket; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(p_pos, p_pos_flat__[(pos__ - 1)],
            "assigning variable p_pos", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(p_pos);
      local_scalar_t__ prev_prior = DUMMY_VAR__;
      current_statement__ = 3;
      prev_prior = context__.vals_r("prev_prior")[(1 - 1)];
      out__.write_free_lub(0, 1, prev_prior);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"p_neg", "p_pos", "prev_prior"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"prev"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_bucket)},
                std::vector<size_t>{static_cast<size_t>(n_bucket)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_bucket; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_neg" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_bucket; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_pos" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "prev_prior");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "prev");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (n_bucket - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "p_neg" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (n_bucket - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "p_pos" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "prev_prior");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "prev");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"p_neg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_bucket) + "},\"block\":\"parameters\"},{\"name\":\"p_pos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_bucket) + "},\"block\":\"parameters\"},{\"name\":\"prev_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prev\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"p_neg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((n_bucket -1)) + "},\"block\":\"parameters\"},{\"name\":\"p_pos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((n_bucket -1)) + "},\"block\":\"parameters\"},{\"name\":\"prev_prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prev\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((n_bucket + n_bucket) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((n_bucket + n_bucket) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_PQ_namespace::model_PQ;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_PQ_namespace::profiles__;
}
#endif
#endif
